--En este archivo esta la creación de la base de datos, la creación de las tablas, de los procedimientos e insertar un dato para el login.

--Creación de base de datos 
CREATE DATABASE ControlEdificios;
GO

--Tabla de empleados
CREATE TABLE Empleados (
	EmpleadoID INT PRIMARY KEY,
	Nombre NVARCHAR(100) NOT NULL,
	Rol NVARCHAR(50) NOT NULL,
);

--Tabla EmpleadoZonas
CREATE TABLE EmpleadoZonas (
	EmpleadoID INT FOREIGN KEY REFERENCES Empleados(EmpleadoID),
	ZonasID INT FOREIGN KEY REFERENCES Zonas(ZonasID),
	PRIMARY KEY (EmpleadoID,ZonasID)
);

--Tabla de Usuarios
CREATE TABLE Usuarios(
	Usuario VARCHAR(50) NOT NULL,
	Contraseña NVARCHAR(50) NOT NULL,
	Rol NVARCHAR(50) NOT NULL
);

--Tabla de Visitantes
CREATE TABLE Visitantes (
	VisitanteID INT PRIMARY KEY,
	Nombre NVARCHAR(100) NOT NULL,
	Telefono NVARCHAR(50),
	MotivoVisita NVARCHAR(200)
);

--Tabla de Zonas
CREATE TABLE Zonas (
	ZonasID INT PRIMARY KEY IDENTITY(1,1),
	NombreZona NVARCHAR(50) NOT NULL,
	AccesoRestringido BIT NOT NULL,
	HoraInicio TIME,
	HoraFin TIME
);

--Tabla de Accesos
CREATE TABLE Accesos (
	AccesoID INT PRIMARY KEY IDENTITY(1,1),
	EmpleadoID INT NULL, --Permite que sea null cuando sea un visitante 
	VisitanteID INT NULL, --Permite que sea null cuando sea un empleado
	ZonaID INT,
	FechaHoraEntrada DATETIME NOT NULL,
	FechaHoraSalida DATETIME,
	FOREIGN KEY (EmpleadoID) REFERENCES Empleados(EmpleadoID),
	FOREIGN KEY (ZonaID) REFERENCES Zonas(ZonasID),
	FOREIGN KEY (VisitanteID) REFERENCES Visitantes(VisitanteID)
);

--Tabla alerta de seguridad

CREATE TABLE AlertaSeguridad (
	AlertaID INT PRIMARY KEY IDENTITY(1,1),
	EmpleadoID INT NOT NULL,
	FechaHora DATETIME,
	TipoAlerta NVARCHAR(100),
	Descripcion NVARCHAR(200),
	FOREIGN KEY (EmpleadoID) REFERENCES Empleados(EmpleadoID)
);

--Tabla EmpleadoZonas
CREATE TABLE EmpleadoZonas(
	EmpleadoID INT FOREIGN KEY REFERENCES Empleados(EmpleadoID),
	ZonasID INT FOREIGN KEY REFERENCES Zonas(ZonasID)
	PRIMARY KEY (EmpleadoID,ZonasID)
);

-- PROCEDIMIENTOS

--Registrar Alerta

CREATE PROCEDURE SP_GenerarAlerta
	@EmpleadoID INT,
	@TipoAlerta NVARCHAR(100),
	@Descripcion NVARCHAR(200)
AS
BEGIN
	INSERT INTO [ControlEdificios].[dbo].[AlertaSeguridad] (EmpleadoID, FechaHora, TipoAlerta, Descripcion)
	VALUES (@EmpleadoID, GETDATE(), @TipoAlerta, @Descripcion);
END;

--Validar login
CREATE PROCEDURE SP_ValidarLogin
	@Usuario NVARCHAR(50),
	@Contraseña NVARCHAR(50)
AS
BEGIN
	SELECT Usuario, Contraseña, Rol
	FROM [ControlEdificios].[dbo].[Usuarios]
	WHERE Usuario = @Usuario AND Contraseña = @Contraseña;
END

-- Procedimiento Asignar Zona

CREATE PROCEDURE SP_AsignarZona
	@EmpleadoID INT,
	@Rol NVARCHAR(50)
AS
BEGIN
	DELETE FROM [ControlEdificios].[dbo].[EmpleadoZonas] WHERE EmpleadoID = @EmpleadoID

	IF @Rol = 'Empleado'
	BEGIN
		INSERT INTO EmpleadoZonas VALUES (@EmpleadoID, 1);
		INSERT INTO EmpleadoZonas VALUES (@EmpleadoID, 2);
		INSERT INTO EmpleadoZonas VALUES (@EmpleadoID, 3);
	END

	IF @Rol = 'Administrador'
	BEGIN
		INSERT INTO EmpleadoZonas VALUES (@EmpleadoID, 1);
		INSERT INTO EmpleadoZonas VALUES (@EmpleadoID, 2);
		INSERT INTO EmpleadoZonas VALUES (@EmpleadoID, 3);
		INSERT INTO EmpleadoZonas VALUES (@EmpleadoID, 4);
		INSERT INTO EmpleadoZonas VALUES (@EmpleadoID, 5);
	END

	IF @Rol = 'Seguridad'
	BEGIN
		INSERT INTO EmpleadoZonas VALUES (@EmpleadoID, 1);
		INSERT INTO EmpleadoZonas VALUES (@EmpleadoID, 2);
		INSERT INTO EmpleadoZonas VALUES (@EmpleadoID, 3);
		INSERT INTO EmpleadoZonas VALUES (@EmpleadoID, 4);
		INSERT INTO EmpleadoZonas VALUES (@EmpleadoID, 5);
		INSERT INTO EmpleadoZonas VALUES (@EmpleadoID, 6);
	END
END

-- Registrar Acceso
CREATE PROCEDURE [dbo].[SP_RegistrarAcceso]
	@EmpleadoID INT = NULL,
	@VisitanteID INT = NULL,
	@ZonaID INT,
	@Mensaje NVARCHAR(100) OUTPUT

AS
BEGIN
	DECLARE @AccesoID INT;

	--Verificar si ya tiene acceso un empleado
	IF @EmpleadoID IS NOT NULL
	BEGIN
		SELECT @AccesoID = AccesoID FROM Accesos
		WHERE EmpleadoID = @EmpleadoID AND FechaHoraSalida IS NULL;

		IF @AccesoID IS NOT NULL
		BEGIN
			UPDATE Accesos
			SET FechaHoraSalida = GETDATE()
			WHERE AccesoID = @AccesoID;

			SET @Mensaje = 'Salida registrada';

			RETURN;
		END
		--Si no hay acceso activo se registra uno
		ELSE 
		BEGIN
			INSERT INTO Accesos(EmpleadoID,ZonaID,FechaHoraEntrada)
			VALUES (@EmpleadoID,@ZonaID,GETDATE());

			SET @Mensaje = 'Ingreso registrado';

			RETURN;
		END
	END

	--Verificar si ya tiene acceso un visitante
	IF @VisitanteID IS NOT NULL
	BEGIN
		SELECT @AccesoID = AccesoID FROM Accesos
		WHERE VisitanteID = @VisitanteID AND FechaHoraSalida IS NULL;

		IF @AccesoID IS NOT NULL
		BEGIN
			UPDATE Accesos
			SET FechaHoraSalida = GETDATE()
			WHERE AccesoID = @AccesoID;
			SET @Mensaje = 'Salida registrada';
		RETURN;
		END

		ELSE
		BEGIN
			INSERT INTO Accesos(VisitanteID,ZonaID,FechaHoraEntrada)
			VALUES (@VisitanteID,@ZonaID,GETDATE());
			SET @Mensaje = 'Ingreso registrado';
		RETURN;
		END
	END
END

INSERT INTO Usuarios (Usuario,Contraseña,Rol)

	VALUES ('Cristian','3000','Administrador')
INSERT INTO Usuarios (Usuario,Contraseña,Rol)

	VALUES ('Manuela','2000','Administrador')
INSERT INTO Usuarios (Usuario,Contraseña,Rol)

	VALUES ('Camilo','1000','Administrador')

INSERT INTO Zonas(NombreZona, AccesoRestringido, HoraInicio, HoraFin)
VALUES ('Principal', 1, '08:00:00', '17:00:00')
INSERT INTO Zonas(NombreZona, AccesoRestringido, HoraInicio, HoraFin)
VALUES ('Oficinas', 1, '08:00:00', '17:00:00')
INSERT INTO Zonas(NombreZona, AccesoRestringido, HoraInicio, HoraFin)
VALUES ('Restaurante', 1, '08:00:00', '17:00:00')
INSERT INTO Zonas(NombreZona, AccesoRestringido, HoraInicio, HoraFin)
VALUES ('Racks', 1, '06:00:00', '22:00:00')
INSERT INTO Zonas(NombreZona, AccesoRestringido, HoraInicio, HoraFin)
VALUES ('Primeros Auxilios', 1, '06:00:00', '22:00:00'))
INSERT INTO Zonas(NombreZona, AccesoRestringido, HoraInicio, HoraFin)
VALUES ('Terraza', 1, '06:00:00', '22:00:00'))


